name: Build and publish release

on:
  release:
    types: [published]

  workflow_dispatch:

# Defines two custom environment variables for the workflow. These are used for 
# the Container registry domain, and a name for the Docker image that this
# workflow builds.
env:
  REGISTRY: ghcr.io
  SERVICE_IMAGE_NAME:  domstolene/da-otel-agent-configuration-service
  FRONTEND_IMAGE_NAME:  domstolene/da-otel-agent-configuration-frontend

jobs:
  build-and-test-artifacts:  

    name: Build and test artifacts
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write

    steps:
    - uses: actions/checkout@v3
    
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Gradle validate wrapper
      uses: gradle/wrapper-validation-action@v1

    - name: Gradle build agent and service
      uses: gradle/gradle-build-action@v2
      with:
        gradle-version: wrapper
        arguments: build --no-daemon

    - name: Gradle publish agent
      uses: gradle/gradle-build-action@v2
      env: 
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        GITHUB_ACTOR: ${{ github.actor }}
      with:
        gradle-version: wrapper
        arguments: publish --no-daemon

    # Upload extension JAR for use in next job.
    - uses: actions/upload-artifact@v4
      with:
        name: da-opentelemetry-javaagent.jar
        path: extension/build/libs/da-opentelemetry-javaagent.jar
        if-no-files-found: error

    # Attach agent JAR to release as an asset
    - uses: shogo82148/actions-upload-release-asset@v1
      with:
        upload_url: ${{ github.event.release.upload_url }}
        asset_path: extension/build/libs/da-opentelemetry-javaagent.jar

    # Upload service JAR for use in next job.
    - uses: actions/upload-artifact@v4
      with:
        name: service.jar
        path: service/build/libs/service.jar
        if-no-files-found: error

    # Upload frontend JAR for use in next job.
    - uses: actions/upload-artifact@v4
      with:
        name: frontend.jar
        path: frontend/build/libs/frontend.jar
        if-no-files-found: error

  # Build and publish SERVICE container image.
  build-and-push-service-image:
    name: Build and push service image
    needs: build-and-test-artifacts
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Log in to the Container registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
        
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.REGISTRY }}/${{ env.SERVICE_IMAGE_NAME }}
          tags: |
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
          flavor: |
            latest=auto

      - name: Download da-opentelemetry-javaagent.jar from previous job
        uses: actions/download-artifact@v4.1.7
        with:
          name: da-opentelemetry-javaagent.jar

      - name: Download service.jar from previous job
        uses: actions/download-artifact@v4.1.7
        with:
          name: service.jar

      - name: Display structure of downloaded files
        run: ls -R

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        
      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          file: .github/workflows/Dockerfile.service
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  # Build and publish FRONTEND container image.
  build-and-push-frontend-image:
    name: Build and push frontend image
    needs: build-and-test-artifacts
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Log in to the Container registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
        
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.REGISTRY }}/${{ env.FRONTEND_IMAGE_NAME }}
          tags: |
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
          flavor: |
            latest=auto            

      - name: Download da-opentelemetry-javaagent.jar from previous job
        uses: actions/download-artifact@v4.1.7
        with:
          name: da-opentelemetry-javaagent.jar

      - name: Download frontend.jar from previous job
        uses: actions/download-artifact@v4.1.7
        with:
          name: frontend.jar

      - name: Display structure of downloaded files
        run: ls -R

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        
      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          file: .github/workflows/Dockerfile.frontend
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
