plugins {
  id "java"
  id "com.github.johnrengelman.shadow" version "8.1.1"
  id "maven-publish"
}

sourceCompatibility = 11
targetCompatibility = 11

ext {
  versions = [
    opentelemetrySdk           : "1.29.0",
    opentelemetryJavaagent     : "1.29.0",
  ]
  jarToPublish = file( "build/libs/da-opentelemetry-javaagent.jar" )
  deps = [
    autoservice: dependencies.create(group: "com.google.auto.service", name: "auto-service", version: "1.1.1")
  ]
}

repositories {
  mavenCentral()
  maven {
    name = "sonatype"
    url = uri("https://oss.sonatype.org/content/repositories/snapshots")
  }
}

publishing {
  repositories {
    maven {
      name = "da-otel-agent"
      url = uri("https://maven.pkg.github.com/domstolene/da-otel-agent")
      credentials {
        username = System.getenv("GITHUB_ACTOR")
        password = System.getenv("GITHUB_TOKEN")
        }
    }
  }
  publications {
    maven(MavenPublication) {
      groupId = "no.domstolene"
      artifactId = "da-opentelemetry-javaagent"
      version = "1.4.0"
      artifact jarToPublish
    }
  }
}

configurations {
  otel
  compileClasspath {
    resolutionStrategy.activateDependencyLocking()
  }
  runtimeClasspath {
    resolutionStrategy.activateDependencyLocking()
  }
}

dependencies {
  implementation(platform("io.opentelemetry:opentelemetry-bom:${versions.opentelemetrySdk}"))

  /*
    Interfaces and SPIs that we implement. We use `compileOnly` dependency
    because during runtime all necessary classes are provided by javaagent
    itself.
   */
  compileOnly "io.opentelemetry:opentelemetry-sdk-extension-autoconfigure-spi"
  compileOnly "io.opentelemetry:opentelemetry-exporter-otlp"

  /*
    Provides @AutoService annotation that makes registration of our SPI
    implementations much easier.
  */
  compileOnly deps.autoservice
  annotationProcessor deps.autoservice

  /*
    These dependencies are required both during compile and runtime.
  */
  implementation "org.apache.commons:commons-lang3:3.12.0"
  implementation "org.apache.httpcomponents:httpclient:4.5.14"
  implementation "com.fasterxml.jackson.core:jackson-databind:2.15.2"
  implementation "com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:2.15.2"

  /*
  For tests
  */
  testImplementation "org.junit.jupiter:junit-jupiter-engine:5.9.3"
  testImplementation "io.opentelemetry:opentelemetry-api:${versions.opentelemetrySdk}"


  // Otel Java instrumentation that we use and extend during integration tests
  otel("io.opentelemetry.javaagent:opentelemetry-javaagent:${versions.opentelemetryJavaagent}")
}

/*
  Produces a copy of upstream javaagent with this extension jar included inside
  it. The location of extension directory inside agent jar is hard-coded in the
  agent source code
*/
task extendedAgent(type: Jar) {
  dependsOn(configurations.otel)
  archiveFileName = "da-opentelemetry-javaagent.jar"
  from zipTree(configurations.otel.singleFile)
  from(tasks.shadowJar.archiveFile) {
    into "extensions"
  }

  //Preserve MANIFEST.MF file from the upstream javaagent
  doFirst {
    manifest.from(
      zipTree(configurations.otel.singleFile).matching {
        include "META-INF/MANIFEST.MF"
      }.singleFile
    )
  }
}

tasks {
  test {
    useJUnitPlatform()
    inputs.files(layout.files(tasks.shadowJar))
    inputs.files(layout.files(tasks.extendedAgent))
  }
  compileJava {
    options.release.set(11)
  }
  assemble.dependsOn(shadowJar)
}
